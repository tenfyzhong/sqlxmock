// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jmoiron/sqlx (interfaces: ColScanner,Queryer,Execer,Ext,Preparer)

// Package sqlxmock is a generated GoMock package.
package sqlxmock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockColScanner is a mock of ColScanner interface
type MockColScanner struct {
	ctrl     *gomock.Controller
	recorder *MockColScannerMockRecorder
}

// MockColScannerMockRecorder is the mock recorder for MockColScanner
type MockColScannerMockRecorder struct {
	mock *MockColScanner
}

// NewMockColScanner creates a new mock instance
func NewMockColScanner(ctrl *gomock.Controller) *MockColScanner {
	mock := &MockColScanner{ctrl: ctrl}
	mock.recorder = &MockColScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColScanner) EXPECT() *MockColScannerMockRecorder {
	return m.recorder
}

// Columns mocks base method
func (m *MockColScanner) Columns() ([]string, error) {
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Columns indicates an expected call of Columns
func (mr *MockColScannerMockRecorder) Columns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockColScanner)(nil).Columns))
}

// Err mocks base method
func (m *MockColScanner) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockColScannerMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockColScanner)(nil).Err))
}

// Scan mocks base method
func (m *MockColScanner) Scan(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockColScannerMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockColScanner)(nil).Scan), arg0...)
}

// MockQueryer is a mock of Queryer interface
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQueryer) Query(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockQueryerMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), varargs...)
}

// QueryRowx mocks base method
func (m *MockQueryer) QueryRowx(arg0 string, arg1 ...interface{}) *sqlx.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx
func (mr *MockQueryerMockRecorder) QueryRowx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockQueryer)(nil).QueryRowx), varargs...)
}

// Queryx mocks base method
func (m *MockQueryer) Queryx(arg0 string, arg1 ...interface{}) (*sqlx.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryx", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryx indicates an expected call of Queryx
func (mr *MockQueryerMockRecorder) Queryx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryx", reflect.TypeOf((*MockQueryer)(nil).Queryx), varargs...)
}

// MockExecer is a mock of Execer interface
type MockExecer struct {
	ctrl     *gomock.Controller
	recorder *MockExecerMockRecorder
}

// MockExecerMockRecorder is the mock recorder for MockExecer
type MockExecerMockRecorder struct {
	mock *MockExecer
}

// NewMockExecer creates a new mock instance
func NewMockExecer(ctrl *gomock.Controller) *MockExecer {
	mock := &MockExecer{ctrl: ctrl}
	mock.recorder = &MockExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecer) EXPECT() *MockExecerMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockExecer) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockExecerMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecer)(nil).Exec), varargs...)
}

// MockExt is a mock of Ext interface
type MockExt struct {
	ctrl     *gomock.Controller
	recorder *MockExtMockRecorder
}

// MockExtMockRecorder is the mock recorder for MockExt
type MockExtMockRecorder struct {
	mock *MockExt
}

// NewMockExt creates a new mock instance
func NewMockExt(ctrl *gomock.Controller) *MockExt {
	mock := &MockExt{ctrl: ctrl}
	mock.recorder = &MockExtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExt) EXPECT() *MockExtMockRecorder {
	return m.recorder
}

// BindNamed mocks base method
func (m *MockExt) BindNamed(arg0 string, arg1 interface{}) (string, []interface{}, error) {
	ret := m.ctrl.Call(m, "BindNamed", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BindNamed indicates an expected call of BindNamed
func (mr *MockExtMockRecorder) BindNamed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindNamed", reflect.TypeOf((*MockExt)(nil).BindNamed), arg0, arg1)
}

// DriverName mocks base method
func (m *MockExt) DriverName() string {
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName
func (mr *MockExtMockRecorder) DriverName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockExt)(nil).DriverName))
}

// Exec mocks base method
func (m *MockExt) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockExtMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExt)(nil).Exec), varargs...)
}

// Query mocks base method
func (m *MockExt) Query(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockExtMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockExt)(nil).Query), varargs...)
}

// QueryRowx mocks base method
func (m *MockExt) QueryRowx(arg0 string, arg1 ...interface{}) *sqlx.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx
func (mr *MockExtMockRecorder) QueryRowx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockExt)(nil).QueryRowx), varargs...)
}

// Queryx mocks base method
func (m *MockExt) Queryx(arg0 string, arg1 ...interface{}) (*sqlx.Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryx", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryx indicates an expected call of Queryx
func (mr *MockExtMockRecorder) Queryx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryx", reflect.TypeOf((*MockExt)(nil).Queryx), varargs...)
}

// Rebind mocks base method
func (m *MockExt) Rebind(arg0 string) string {
	ret := m.ctrl.Call(m, "Rebind", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind
func (mr *MockExtMockRecorder) Rebind(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockExt)(nil).Rebind), arg0)
}

// MockPreparer is a mock of Preparer interface
type MockPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockPreparerMockRecorder
}

// MockPreparerMockRecorder is the mock recorder for MockPreparer
type MockPreparerMockRecorder struct {
	mock *MockPreparer
}

// NewMockPreparer creates a new mock instance
func NewMockPreparer(ctrl *gomock.Controller) *MockPreparer {
	mock := &MockPreparer{ctrl: ctrl}
	mock.recorder = &MockPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPreparer) EXPECT() *MockPreparerMockRecorder {
	return m.recorder
}

// Prepare mocks base method
func (m *MockPreparer) Prepare(arg0 string) (*sql.Stmt, error) {
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockPreparerMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPreparer)(nil).Prepare), arg0)
}
