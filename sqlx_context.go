// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jmoiron/sqlx (interfaces: QueryerContext,PreparerContext,ExecerContext,ExtContext)

// Package sqlxmock is a generated GoMock package.
package sqlxmock

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockQueryerContext is a mock of QueryerContext interface
type MockQueryerContext struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerContextMockRecorder
}

// MockQueryerContextMockRecorder is the mock recorder for MockQueryerContext
type MockQueryerContextMockRecorder struct {
	mock *MockQueryerContext
}

// NewMockQueryerContext creates a new mock instance
func NewMockQueryerContext(ctrl *gomock.Controller) *MockQueryerContext {
	mock := &MockQueryerContext{ctrl: ctrl}
	mock.recorder = &MockQueryerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryerContext) EXPECT() *MockQueryerContextMockRecorder {
	return m.recorder
}

// QueryContext mocks base method
func (m *MockQueryerContext) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockQueryerContextMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockQueryerContext)(nil).QueryContext), varargs...)
}

// QueryRowxContext mocks base method
func (m *MockQueryerContext) QueryRowxContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sqlx.Row {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext
func (mr *MockQueryerContextMockRecorder) QueryRowxContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockQueryerContext)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method
func (m *MockQueryerContext) QueryxContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sqlx.Rows, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext
func (mr *MockQueryerContextMockRecorder) QueryxContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockQueryerContext)(nil).QueryxContext), varargs...)
}

// MockPreparerContext is a mock of PreparerContext interface
type MockPreparerContext struct {
	ctrl     *gomock.Controller
	recorder *MockPreparerContextMockRecorder
}

// MockPreparerContextMockRecorder is the mock recorder for MockPreparerContext
type MockPreparerContextMockRecorder struct {
	mock *MockPreparerContext
}

// NewMockPreparerContext creates a new mock instance
func NewMockPreparerContext(ctrl *gomock.Controller) *MockPreparerContext {
	mock := &MockPreparerContext{ctrl: ctrl}
	mock.recorder = &MockPreparerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPreparerContext) EXPECT() *MockPreparerContextMockRecorder {
	return m.recorder
}

// PrepareContext mocks base method
func (m *MockPreparerContext) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext
func (mr *MockPreparerContextMockRecorder) PrepareContext(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockPreparerContext)(nil).PrepareContext), arg0, arg1)
}

// MockExecerContext is a mock of ExecerContext interface
type MockExecerContext struct {
	ctrl     *gomock.Controller
	recorder *MockExecerContextMockRecorder
}

// MockExecerContextMockRecorder is the mock recorder for MockExecerContext
type MockExecerContextMockRecorder struct {
	mock *MockExecerContext
}

// NewMockExecerContext creates a new mock instance
func NewMockExecerContext(ctrl *gomock.Controller) *MockExecerContext {
	mock := &MockExecerContext{ctrl: ctrl}
	mock.recorder = &MockExecerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecerContext) EXPECT() *MockExecerContextMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockExecerContext) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockExecerContextMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockExecerContext)(nil).ExecContext), varargs...)
}

// MockExtContext is a mock of ExtContext interface
type MockExtContext struct {
	ctrl     *gomock.Controller
	recorder *MockExtContextMockRecorder
}

// MockExtContextMockRecorder is the mock recorder for MockExtContext
type MockExtContextMockRecorder struct {
	mock *MockExtContext
}

// NewMockExtContext creates a new mock instance
func NewMockExtContext(ctrl *gomock.Controller) *MockExtContext {
	mock := &MockExtContext{ctrl: ctrl}
	mock.recorder = &MockExtContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtContext) EXPECT() *MockExtContextMockRecorder {
	return m.recorder
}

// BindNamed mocks base method
func (m *MockExtContext) BindNamed(arg0 string, arg1 interface{}) (string, []interface{}, error) {
	ret := m.ctrl.Call(m, "BindNamed", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BindNamed indicates an expected call of BindNamed
func (mr *MockExtContextMockRecorder) BindNamed(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindNamed", reflect.TypeOf((*MockExtContext)(nil).BindNamed), arg0, arg1)
}

// DriverName mocks base method
func (m *MockExtContext) DriverName() string {
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName
func (mr *MockExtContextMockRecorder) DriverName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockExtContext)(nil).DriverName))
}

// ExecContext mocks base method
func (m *MockExtContext) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockExtContextMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockExtContext)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method
func (m *MockExtContext) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockExtContextMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockExtContext)(nil).QueryContext), varargs...)
}

// QueryRowxContext mocks base method
func (m *MockExtContext) QueryRowxContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sqlx.Row {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext
func (mr *MockExtContextMockRecorder) QueryRowxContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockExtContext)(nil).QueryRowxContext), varargs...)
}

// QueryxContext mocks base method
func (m *MockExtContext) QueryxContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sqlx.Rows, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext
func (mr *MockExtContextMockRecorder) QueryxContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockExtContext)(nil).QueryxContext), varargs...)
}

// Rebind mocks base method
func (m *MockExtContext) Rebind(arg0 string) string {
	ret := m.ctrl.Call(m, "Rebind", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind
func (mr *MockExtContextMockRecorder) Rebind(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockExtContext)(nil).Rebind), arg0)
}
